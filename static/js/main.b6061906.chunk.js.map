{"version":3,"sources":["services/copyLab.ts","helper/readExcelFile.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getGroupCodeOfTestCodeNo","groupno","groupOnly","result","test","map","testCodeEle","listGroup","temp","TEST_CODE","GROUP_CODE","temp2","groupEle","GROUP_COMPONENT","includes","push","CODE","join","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","minLen","_arrayLikeToArray","n","toString","from","_unsupportedIterableToArray","F","s","e","_e","f","normalCompletion","didErr","step","_e2","arr","len","arr2","readExcelFile","_ref","asyncToGenerator","_callee","files","sheets","data","_iterator","_step","_ref4","_ref3","index","sheetName","rows","_context","readSheetNames","entries","slicedToArray","readXlsxFile","sheet","testCodes","ele","groupCodes","t0","_x","apply","arguments","exportExcelFile","csvData","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","concat","Date","now","App_regeneratorRuntime","App","useEffect","document","title","inputChange","target","alert","react_default","a","createElement","accept","onChange","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b6061906.chunk.js","sourcesContent":["import { writeJsonFile } from \"./groupcode\";\nimport { DataObject, GroupCodeData, GroupComponent } from \"../types\";\n// import constants from \"./constants\";\n\nexport const getGroupCodeOfTestCodeNo = (\n\tgroupno: string[],\n\tgroupOnly: GroupComponent[]\n): DataObject[] => {\n\tconst result: GroupCodeData[] = [];\n\tconst test: DataObject[] = [];\n\n\tgroupno.map((testCodeEle) => {\n\t\tconst listGroup: string[] = [];\n\t\tconst temp: GroupCodeData = {\n\t\t\tTEST_CODE: testCodeEle,\n\t\t\tGROUP_CODE: listGroup,\n\t\t};\n\n\t\tconst temp2: DataObject = {\n\t\t\tTEST_CODE: testCodeEle,\n\t\t\tGROUP_CODE: \"\",\n\t\t};\n\t\tgroupOnly.map((groupEle) => {\n\t\t\tif (groupEle.GROUP_COMPONENT.includes(testCodeEle)) {\n\t\t\t\tlistGroup.push(groupEle.CODE);\n\t\t\t}\n\t\t});\n\n\t\ttemp.GROUP_CODE = listGroup;\n\t\tresult.push(temp);\n\n\t\ttemp2.GROUP_CODE = listGroup.join(\", \");\n\t\ttest.push(temp2);\n\t});\n\n\t// console.log({ result, test });\n\t// console.log(test.length, constants.groupno.length);\n\n\t// writeJsonFile(test);\n\treturn test;\n};\n","import * as XLSX from \"xlsx\";\nimport * as FileSaver from \"file-saver\";\nimport readXlsxFile, { readSheetNames } from \"read-excel-file\";\nimport { DataObject, ExcelObject, GroupComponent } from \"../types\";\n\nexport const readExcelFile = async (files: File[]): Promise<ExcelObject> => {\n\tconst sheets = await readSheetNames(files[0]);\n\tconst data: ExcelObject = {} as ExcelObject;\n\n\tfor (const [index, sheetName] of sheets.entries()) {\n\t\tconst rows = await readXlsxFile(files[0], { sheet: sheetName });\n\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\tconst testCodes: string[] = [];\n\t\t\t\trows.map((ele, index) => {\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\tconst TEST_CODE = (ele[0] || \"\").toString();\n\t\t\t\t\t\ttestCodes.push(TEST_CODE);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdata.groupno = testCodes;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tconst groupCodes: GroupComponent[] = [];\n\t\t\t\trows.map((ele, index) => {\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\tconst CODE = (ele[0] || \"\").toString();\n\t\t\t\t\t\tconst GROUP_COMPONENT = (ele[1] || \"\").toString();\n\t\t\t\t\t\tconst obj: GroupComponent = { CODE, GROUP_COMPONENT };\n\t\t\t\t\t\tgroupCodes.push(obj);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdata.groupOnly = groupCodes;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn Promise.resolve(data);\n};\n\nexport const exportExcelFile = (csvData: DataObject[]) => {\n\tconst fileType =\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n\n\tconst ws = XLSX.utils.json_to_sheet(csvData);\n\tconst wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n\tconst excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n\tconst data = new Blob([excelBuffer], { type: fileType });\n\tFileSaver.saveAs(data, `result-${Date.now()}.xlsx`);\n};\n","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { groupTestCode } from \"./services/groupcode\";\nimport { getGroupCodeOfTestCodeNo } from \"./services/copyLab\";\nimport { exportExcelFile, readExcelFile } from \"./helper/readExcelFile\";\nimport { ExcelObject } from \"./types\";\n\nfunction App() {\n\tuseEffect(() => {\n\t\t// groupTestCode();\n\t\t// getGroupCodeOfTestCodeNo();\n\t\tdocument.title = \"Anh Hong\";\n\t}, []);\n\n\tconst inputChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst files = (e.target.files && Array.from(e.target.files)) || [];\n\n\t\tif (files.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst data = await readExcelFile(files);\n\t\t\t\tconst result = getGroupCodeOfTestCodeNo(data.groupno, data.groupOnly);\n\t\t\t\t// console.log(result);\n\t\t\t\texportExcelFile(result);\n\t\t\t} catch (error) {\n\t\t\t\talert(\"An error occurred, please try again\");\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype=\"file\"\n\t\t\t\taccept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n\t\t\t\tonChange={inputChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}